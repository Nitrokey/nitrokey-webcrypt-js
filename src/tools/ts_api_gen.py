# Copyright 2022 Nitrokey GmbH
#
# Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
# http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
# http://opensource.org/licenses/MIT>, at your option. This file may not be
# copied, modified, or distributed except according to those terms.

# This is a quick tool used for Typescript API generation. It is planned for a cleaner rewrite.

import dataclasses
from collections import defaultdict

data = """

| ID   | Mnemonic                 | Parameters                      | Returns                                 | Au  | Bt  |
|------|--------------------------|---------------------------------|-----------------------------------------|-----|-----|
| 0x0  | STATUS                   | None                            | `{UNLOCKED,VERSION,SLOTS,PIN_ATTEMPTS}` | -   | -   |
| 0x1  | TEST_PING                | Any / Raw                       | Any / Raw                               | -   | -   |
| 0x2  | TEST_CLEAR               | None                            | None                                    | -   | -   |
| 0x3  | TEST_REBOOT              | None                            | None                                    | -   | -   |
| 0x4  | LOGIN                    | `{PIN}`                         | `{TP}`                                  | -   | +   |
| 0x5  | LOGOUT                   | None                            | None                                    | -   | -   |
| 0x6  | FACTORY_RESET            | None                            | None                                    | -   | +   |
| 0x7  | *RESERVED*               | -                               | -                                       | -   | +   |
| 0x8  | SET_CONFIGURATION        | `{CONFIRMATION}`                | None                                    | -   | +   |
| 0x9  | GET_CONFIGURATION        | None                            | `{CONFIRMATION}`                        | -   | +   |
| 0x0A | SET_PIN                  | `{PIN}`                         | None                                    | -   | +   |
| 0x0B | CHANGE_PIN               | `{PIN,NEWPIN}`                  | None                                    | -   | +   |
| 0x10 | INITIALIZE_SEED          | `{ENTROPY}`                     | `{MASTER,SALT}`                         | +   | +   |
| 0x11 | RESTORE_FROM_SEED        | `{MASTER,SALT}`                 | `{HASH}`                                | +   | +   |
| 0x12 | GENERATE_KEY             | None                            | `{PUBKEY,KEYHANDLE}`                    | +   | +   |
| 0x13 | SIGN                     | `{HASH,KEYHANDLE}`              | `{SIGNATURE,INHASH}`                    | +   | +   |
| 0x14 | DECRYPT                  | `{DATA,KEYHANDLE,HMAC,ECCEKEY}` | `{DATA}`                                | +   | +   |
| 0x15 | GENERATE_KEY_FROM_DATA   | `{HASH}`                        | `{PUBKEY,KEYHANDLE}`                    | +   | +   |
| 0x16 | GENERATE_RESIDENT_KEY    | None                            | `{PUBKEY,KEYHANDLE}`                    | +   | +   |
| 0x17 | READ_RESIDENT_KEY_PUBLIC | `{KEYHANDLE}`                   | `{PUBKEY,KEYHANDLE}`                    | +   | +   |
| 0x18 | DISCOVER_RESIDENT_KEYS   | TBD                             | TBD                                     | +   | +   |
| 0x19 | WRITE_RESIDENT_KEY       | `{RAW_KEY_DATA}`                | `{PUBKEY,KEYHANDLE}`                    | +   | +   |

"""


@dataclasses.dataclass
class Names:
    function: str
    input: str
    output: str


def names(mnemonic: str) -> Names:
    mnemonic: str = mnemonic.replace("_", " ").title().replace(" ", "")
    return Names(
        f"Webcrypt_{mnemonic}",
        f"Command{mnemonic}Params",
        f"Command{mnemonic}Return",
    )


paramsDictEmpty = defaultdict(lambda: [])


def getParams(name: str, params: str):
    global paramsDictEmpty
    if params == "{}" or params == "None" or params == "TBD":
        # return f"export type {name} = " + "void;"
        return f"// {name}"
    if params == "Any / Raw":
        params = "WebcryptData"
    params = params.replace("`{", "").replace("}`", "")
    paramsa = params.split(',')
    paramsDictEmpty[name] = paramsa

    res = []
    res.append(f"export class {name} xxx")
    for p in paramsa:
        res.append(f"    public {p}: WebcryptData;")
    # res += "    constructor(pk: string, kh: string) xxx"
    pl = ', '.join([f"{n}: WebcryptData" for n in paramsa])
    res.append(f"    constructor({pl}) xxx")
    for p in paramsa:
        res.append(f"        this.{p} = {p};")
    res.append("    xxy")
    res.append("xxy")

    return '\n'.join(res).replace("xxx", "{").replace("xxy", "}")


print("""
// AUTOGENERATED'
import {StatusCallback} from "@/js/types";
import {send_command} from "@/js/transport";
import {WEBCRYPT_CMD} from "@/js/constants";
import {Session} from "@/js/session";
const session = new Session();

export type WebcryptData = string;

""")

testCalls = []

for line in data.split("\n")[4:]:
    if not line.strip() or "RESERVED" in line: continue
    row = line.split('|')
    clean_row = list(map(str.strip, row))
    clean_row = clean_row[1:-1]
    if not clean_row[0].strip(): continue

    id, mnemonic, params, returns, a, b = clean_row
    n = names(mnemonic)
    print(getParams(n.input, params))
    print(getParams(n.output, returns))
    input = ""
    if paramsDictEmpty[n.input]:
        input = f", data: {n.input}"
    output = "Promise<void>"
    ret = ""
    if paramsDictEmpty[n.output]:
        output = f"Promise<{n.output}>"
        ret = "\n        " + f"return new {n.output}(" + ", ".join(
            [f'res["{n}"]' for n in paramsDictEmpty[n.output]]) + ");"
    print(
        f'export async function {n.function}(statusCallback: StatusCallback{input}): {output}' + "{", end="")
    print(f"""
        const res = await send_command(session, WEBCRYPT_CMD.{mnemonic}, """ + (
        "data" if input else "{}") + f""", statusCallback);{ret}""" + """
}""")
